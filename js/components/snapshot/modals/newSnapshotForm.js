import React, { memo, useState, useContext } from 'react';
import { Grid, makeStyles, Typography, Checkbox, FormControlLabel } from '@material-ui/core';
import { useDispatch, useSelector } from 'react-redux';
import { DJANGO_CONTEXT } from '../../../utils/djangoContext';
import { Form, Formik, Field } from 'formik';
import { InputFieldAvatar } from '../../projects/projectModal/inputFieldAvatar';
import { Description, Title, QuestionAnswer, FindReplace } from '@material-ui/icons';
import { TextField } from 'formik-material-ui';
import { Button } from '../../common/Inputs/Button';
import { SnapshotType } from '../../projects/redux/constants';
import { createNewSnapshot } from '../redux/dispatchActions';
import { NglContext } from '../../nglView/nglProvider';
import { isDiscourseAvailable, isDiscourseUserAvailable } from '../../../utils/discourse';
import { RegisterNotice } from '../../discourse/RegisterNotice';

import moment from 'moment';

const useStyles = makeStyles(theme => ({
  body: {
    width: '100%',
    marginTop: theme.spacing(1),
    marginBottom: theme.spacing(1)
  },
  input: {
    width: 400
  },
  margin: {
    margin: theme.spacing(1)
  },
  formControl: {
    margin: theme.spacing(1),
    width: 400
  },
  checkbox: {
    margin: theme.spacing(0)
  }
}));

export const NewSnapshotForm = memo(({ handleCloseModal }) => {
  const classes = useStyles();
  const [state, setState] = useState();
  const dispatch = useDispatch();
  const { nglViewList } = useContext(NglContext);
  const [overwriteSnapshot, setoverwriteSnapshot] = useState(false);
  let [createDiscourse, setCreateDiscourse] = useState(true);

  const discourseAvailable = isDiscourseAvailable();
  const dicourseUserAvailable = isDiscourseUserAvailable();
  createDiscourse &= dicourseUserAvailable;

  const currentSnapshot = useSelector(state => state.projectReducers.currentSnapshot);
  const currentProject = useSelector(state => state.projectReducers.currentProject);
  const isLoadingSnapshotDialog = useSelector(state => state.snapshotReducers.isLoadingSnapshotDialog);
  const isForceProjectCreated = useSelector(state => state.projectReducers.isForceProjectCreated);

  const getAllMolecules = useSelector(state => state.apiReducers.all_mol_lists);

  // get ids of selected/visible compounds
  const currentSnapshotSelectedCompoundsIDs = useSelector(state => state.selectionReducers.moleculesToEdit);
  const currentSnapshotVisibleCompoundsIDs = useSelector(state => state.selectionReducers.fragmentDisplayList);

  // get protein_code from ids of selected/visible compounds
  const currentSnapshotSelectedCompounds = getAllMolecules
    .filter(molecule => currentSnapshotSelectedCompoundsIDs.includes(molecule.id))
    .map(molecule => molecule.protein_code);
  const currentSnapshotVisibleCompounds = getAllMolecules
    .filter(molecule => currentSnapshotVisibleCompoundsIDs.includes(molecule.id))
    .map(molecule => molecule.protein_code);

  const currentSnapshotId = currentSnapshot && currentSnapshot.id;
  const loggedInUserID = DJANGO_CONTEXT['pk'];
  const username = DJANGO_CONTEXT['username'];

  const toggleoverwriteSnapshot = () => {
    if (overwriteSnapshot === true) {
      setoverwriteSnapshot(false);
    } else {
      setoverwriteSnapshot(true);
    }
  };

  return (
    <>
      <Typography variant="h3">Snapshot details</Typography>
      <Formik
        initialValues={{
          title: moment().format('-- YYYY-MM-DD -- HH:mm:ss'),
          description:
            loggedInUserID === undefined ? 'Snapshot generated by anonymous user' : `snapshot generated by ${username}`,
          tags: ''
        }}
        validate={values => {
          const errors = {};
          if (!values.title) {
            errors.title = 'Required!';
          }
          if (!values.description) {
            errors.description = 'Required!';
          }
          return errors;
        }}
        onSubmit={values => {
          const title = values.title;
          const description = values.description;
          const type = SnapshotType.MANUAL;
          const author = DJANGO_CONTEXT['pk'] || null;
          const parent = isForceProjectCreated === false ? currentSnapshot.id : null;
          const session_project = currentProject.projectID;

          dispatch(
            createNewSnapshot({
              title,
              description,
              type,
              author,
              parent,
              session_project,
              nglViewList,
              overwriteSnapshot,
              createDiscourse,
              currentSnapshotSelectedCompounds,
              currentSnapshotVisibleCompounds
            })
          ).catch(error => {
            setState(() => {
              throw error;
            });
          });
        }}
      >
        {({ submitForm, isSubmitting }) => (
          <Form>
            <Grid container direction="column" className={classes.body}>
              <Grid item>
                <InputFieldAvatar
                  icon={<Title />}
                  field={
                    <Field
                      component={TextField}
                      className={classes.input}
                      name="title"
                      label="Title"
                      required
                      disabled={isLoadingSnapshotDialog || isSubmitting}
                    />
                  }
                />
              </Grid>
              <Grid item>
                <InputFieldAvatar
                  icon={<Description />}
                  field={
                    <Field
                      component={TextField}
                      className={classes.input}
                      name="description"
                      label="Description"
                      required
                      disabled={isLoadingSnapshotDialog || isSubmitting}
                    />
                  }
                />
              </Grid>
              {currentSnapshotId && (
                <Grid item>
                  <InputFieldAvatar
                    icon={<FindReplace />}
                    field={
                      <FormControlLabel
                        control={
                          <Checkbox
                            onChange={() => {
                              toggleoverwriteSnapshot();
                            }}
                            disabled={isLoadingSnapshotDialog || isSubmitting}
                            name="overwrite"
                          />
                        }
                        label="Overwrite current snapshot"
                      />
                    }
                  />
                </Grid>
              )}
              <Grid item>
                <InputFieldAvatar
                  icon={<QuestionAnswer />}
                  field={
                    <FormControlLabel
                      control={
                        <Checkbox
                          checked={createDiscourse}
                          onChange={() => setCreateDiscourse(!createDiscourse)}
                          disabled={!discourseAvailable || isSubmitting || !dicourseUserAvailable}
                          name="createDisTopic"
                        />
                      }
                      label="Create Discourse post"
                    />
                  }
                />
              </Grid>
              {!dicourseUserAvailable && (
                <Grid item>
                  <RegisterNotice></RegisterNotice>
                </Grid>
              )}
            </Grid>
            <Grid container justify="flex-end" direction="row">
              <Grid item>
                <Button color="secondary" disabled={isLoadingSnapshotDialog || isSubmitting} onClick={handleCloseModal}>
                  Cancel
                </Button>
              </Grid>
              <Grid item>
                <Button color="primary" onClick={submitForm} loading={isLoadingSnapshotDialog || isSubmitting}>
                  Save
                </Button>
              </Grid>
            </Grid>
          </Form>
        )}
      </Formik>
    </>
  );
});
